// dma_mem_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.1 186 at 2016.09.12.18:57:34

`timescale 1 ps / 1 ps
module dma_mem_mm_interconnect_0 (
		input  wire         sdram_afi_clk_clk,                                                     //                                                   sdram_afi_clk.clk
		input  wire         mm_traffic_generator_avl_reset_reset_bridge_in_reset_reset,            //            mm_traffic_generator_avl_reset_reset_bridge_in_reset.reset
		input  wire         mm_traffic_generator_avl_translator_reset_reset_bridge_in_reset_reset, // mm_traffic_generator_avl_translator_reset_reset_bridge_in_reset.reset
		input  wire         sdram_avl_translator_reset_reset_bridge_in_reset_reset,                //                sdram_avl_translator_reset_reset_bridge_in_reset.reset
		input  wire         sdram_soft_reset_reset_bridge_in_reset_reset,                          //                          sdram_soft_reset_reset_bridge_in_reset.reset
		input  wire [29:0]  mm_traffic_generator_avl_address,                                      //                                        mm_traffic_generator_avl.address
		output wire         mm_traffic_generator_avl_waitrequest,                                  //                                                                .waitrequest
		input  wire [8:0]   mm_traffic_generator_avl_burstcount,                                   //                                                                .burstcount
		input  wire [31:0]  mm_traffic_generator_avl_byteenable,                                   //                                                                .byteenable
		input  wire         mm_traffic_generator_avl_read,                                         //                                                                .read
		output wire [255:0] mm_traffic_generator_avl_readdata,                                     //                                                                .readdata
		output wire         mm_traffic_generator_avl_readdatavalid,                                //                                                                .readdatavalid
		input  wire         mm_traffic_generator_avl_write,                                        //                                                                .write
		input  wire [255:0] mm_traffic_generator_avl_writedata,                                    //                                                                .writedata
		output wire [24:0]  sdram_avl_address,                                                     //                                                       sdram_avl.address
		output wire         sdram_avl_write,                                                       //                                                                .write
		output wire         sdram_avl_read,                                                        //                                                                .read
		input  wire [255:0] sdram_avl_readdata,                                                    //                                                                .readdata
		output wire [255:0] sdram_avl_writedata,                                                   //                                                                .writedata
		output wire         sdram_avl_beginbursttransfer,                                          //                                                                .beginbursttransfer
		output wire [8:0]   sdram_avl_burstcount,                                                  //                                                                .burstcount
		input  wire         sdram_avl_readdatavalid,                                               //                                                                .readdatavalid
		input  wire         sdram_avl_waitrequest                                                  //                                                                .waitrequest
	);

	wire          mm_traffic_generator_avl_translator_avalon_universal_master_0_waitrequest;   // sdram_avl_translator:uav_waitrequest -> mm_traffic_generator_avl_translator:uav_waitrequest
	wire  [255:0] mm_traffic_generator_avl_translator_avalon_universal_master_0_readdata;      // sdram_avl_translator:uav_readdata -> mm_traffic_generator_avl_translator:uav_readdata
	wire          mm_traffic_generator_avl_translator_avalon_universal_master_0_debugaccess;   // mm_traffic_generator_avl_translator:uav_debugaccess -> sdram_avl_translator:uav_debugaccess
	wire   [29:0] mm_traffic_generator_avl_translator_avalon_universal_master_0_address;       // mm_traffic_generator_avl_translator:uav_address -> sdram_avl_translator:uav_address
	wire          mm_traffic_generator_avl_translator_avalon_universal_master_0_read;          // mm_traffic_generator_avl_translator:uav_read -> sdram_avl_translator:uav_read
	wire   [31:0] mm_traffic_generator_avl_translator_avalon_universal_master_0_byteenable;    // mm_traffic_generator_avl_translator:uav_byteenable -> sdram_avl_translator:uav_byteenable
	wire          mm_traffic_generator_avl_translator_avalon_universal_master_0_readdatavalid; // sdram_avl_translator:uav_readdatavalid -> mm_traffic_generator_avl_translator:uav_readdatavalid
	wire          mm_traffic_generator_avl_translator_avalon_universal_master_0_lock;          // mm_traffic_generator_avl_translator:uav_lock -> sdram_avl_translator:uav_lock
	wire          mm_traffic_generator_avl_translator_avalon_universal_master_0_write;         // mm_traffic_generator_avl_translator:uav_write -> sdram_avl_translator:uav_write
	wire  [255:0] mm_traffic_generator_avl_translator_avalon_universal_master_0_writedata;     // mm_traffic_generator_avl_translator:uav_writedata -> sdram_avl_translator:uav_writedata
	wire   [13:0] mm_traffic_generator_avl_translator_avalon_universal_master_0_burstcount;    // mm_traffic_generator_avl_translator:uav_burstcount -> sdram_avl_translator:uav_burstcount

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (30),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (9),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (30),
		.UAV_BURSTCOUNT_W            (14),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_traffic_generator_avl_translator (
		.clk                    (sdram_afi_clk_clk),                                                           //                       clk.clk
		.reset                  (mm_traffic_generator_avl_translator_reset_reset_bridge_in_reset_reset),       //                     reset.reset
		.uav_address            (mm_traffic_generator_avl_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (mm_traffic_generator_avl_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (mm_traffic_generator_avl_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (mm_traffic_generator_avl_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (mm_traffic_generator_avl_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (mm_traffic_generator_avl_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (mm_traffic_generator_avl_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (mm_traffic_generator_avl_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (mm_traffic_generator_avl_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (mm_traffic_generator_avl_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (mm_traffic_generator_avl_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (mm_traffic_generator_avl_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (mm_traffic_generator_avl_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (mm_traffic_generator_avl_burstcount),                                         //                          .burstcount
		.av_byteenable          (mm_traffic_generator_avl_byteenable),                                         //                          .byteenable
		.av_read                (mm_traffic_generator_avl_read),                                               //                          .read
		.av_readdata            (mm_traffic_generator_avl_readdata),                                           //                          .readdata
		.av_readdatavalid       (mm_traffic_generator_avl_readdatavalid),                                      //                          .readdatavalid
		.av_write               (mm_traffic_generator_avl_write),                                              //                          .write
		.av_writedata           (mm_traffic_generator_avl_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.av_debugaccess         (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (9),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (14),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_avl_translator (
		.clk                    (sdram_afi_clk_clk),                                                           //                      clk.clk
		.reset                  (sdram_avl_translator_reset_reset_bridge_in_reset_reset),                      //                    reset.reset
		.uav_address            (mm_traffic_generator_avl_translator_avalon_universal_master_0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (mm_traffic_generator_avl_translator_avalon_universal_master_0_burstcount),    //                         .burstcount
		.uav_read               (mm_traffic_generator_avl_translator_avalon_universal_master_0_read),          //                         .read
		.uav_write              (mm_traffic_generator_avl_translator_avalon_universal_master_0_write),         //                         .write
		.uav_waitrequest        (mm_traffic_generator_avl_translator_avalon_universal_master_0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (mm_traffic_generator_avl_translator_avalon_universal_master_0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (mm_traffic_generator_avl_translator_avalon_universal_master_0_byteenable),    //                         .byteenable
		.uav_readdata           (mm_traffic_generator_avl_translator_avalon_universal_master_0_readdata),      //                         .readdata
		.uav_writedata          (mm_traffic_generator_avl_translator_avalon_universal_master_0_writedata),     //                         .writedata
		.uav_lock               (mm_traffic_generator_avl_translator_avalon_universal_master_0_lock),          //                         .lock
		.uav_debugaccess        (mm_traffic_generator_avl_translator_avalon_universal_master_0_debugaccess),   //                         .debugaccess
		.av_address             (sdram_avl_address),                                                           //      avalon_anti_slave_0.address
		.av_write               (sdram_avl_write),                                                             //                         .write
		.av_read                (sdram_avl_read),                                                              //                         .read
		.av_readdata            (sdram_avl_readdata),                                                          //                         .readdata
		.av_writedata           (sdram_avl_writedata),                                                         //                         .writedata
		.av_beginbursttransfer  (sdram_avl_beginbursttransfer),                                                //                         .beginbursttransfer
		.av_burstcount          (sdram_avl_burstcount),                                                        //                         .burstcount
		.av_readdatavalid       (sdram_avl_readdatavalid),                                                     //                         .readdatavalid
		.av_waitrequest         (sdram_avl_waitrequest),                                                       //                         .waitrequest
		.av_begintransfer       (),                                                                            //              (terminated)
		.av_byteenable          (),                                                                            //              (terminated)
		.av_writebyteenable     (),                                                                            //              (terminated)
		.av_lock                (),                                                                            //              (terminated)
		.av_chipselect          (),                                                                            //              (terminated)
		.av_clken               (),                                                                            //              (terminated)
		.uav_clken              (1'b0),                                                                        //              (terminated)
		.av_debugaccess         (),                                                                            //              (terminated)
		.av_outputenable        (),                                                                            //              (terminated)
		.uav_response           (),                                                                            //              (terminated)
		.av_response            (2'b00),                                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                         //              (terminated)
	);

endmodule
