// dma_mem_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.1 186 at 2016.08.30.18:21:11

`timescale 1 ps / 1 ps
module dma_mem_mm_interconnect_1 (
		input  wire         clk_50_clk_clk,                        //                      clk_50_clk.clk
		input  wire         dma_reset_reset_bridge_in_reset_reset, // dma_reset_reset_bridge_in_reset.reset
		input  wire [9:0]   dma_read_master_address,               //                 dma_read_master.address
		output wire         dma_read_master_waitrequest,           //                                .waitrequest
		input  wire         dma_read_master_chipselect,            //                                .chipselect
		input  wire         dma_read_master_read,                  //                                .read
		output wire [127:0] dma_read_master_readdata,              //                                .readdata
		output wire         dma_read_master_readdatavalid,         //                                .readdatavalid
		output wire [8:0]   Avalon_slave_s0_address,               //                 Avalon_slave_s0.address
		output wire         Avalon_slave_s0_write,                 //                                .write
		output wire         Avalon_slave_s0_read,                  //                                .read
		input  wire [15:0]  Avalon_slave_s0_readdata,              //                                .readdata
		output wire [15:0]  Avalon_slave_s0_writedata,             //                                .writedata
		output wire [1:0]   Avalon_slave_s0_byteenable             //                                .byteenable
	);

	wire          dma_read_master_translator_avalon_universal_master_0_waitrequest;   // dma_read_master_agent:av_waitrequest -> dma_read_master_translator:uav_waitrequest
	wire  [127:0] dma_read_master_translator_avalon_universal_master_0_readdata;      // dma_read_master_agent:av_readdata -> dma_read_master_translator:uav_readdata
	wire          dma_read_master_translator_avalon_universal_master_0_debugaccess;   // dma_read_master_translator:uav_debugaccess -> dma_read_master_agent:av_debugaccess
	wire    [9:0] dma_read_master_translator_avalon_universal_master_0_address;       // dma_read_master_translator:uav_address -> dma_read_master_agent:av_address
	wire          dma_read_master_translator_avalon_universal_master_0_read;          // dma_read_master_translator:uav_read -> dma_read_master_agent:av_read
	wire   [15:0] dma_read_master_translator_avalon_universal_master_0_byteenable;    // dma_read_master_translator:uav_byteenable -> dma_read_master_agent:av_byteenable
	wire          dma_read_master_translator_avalon_universal_master_0_readdatavalid; // dma_read_master_agent:av_readdatavalid -> dma_read_master_translator:uav_readdatavalid
	wire          dma_read_master_translator_avalon_universal_master_0_lock;          // dma_read_master_translator:uav_lock -> dma_read_master_agent:av_lock
	wire          dma_read_master_translator_avalon_universal_master_0_write;         // dma_read_master_translator:uav_write -> dma_read_master_agent:av_write
	wire  [127:0] dma_read_master_translator_avalon_universal_master_0_writedata;     // dma_read_master_translator:uav_writedata -> dma_read_master_agent:av_writedata
	wire    [4:0] dma_read_master_translator_avalon_universal_master_0_burstcount;    // dma_read_master_translator:uav_burstcount -> dma_read_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                  // rsp_mux:src_valid -> dma_read_master_agent:rp_valid
	wire  [189:0] rsp_mux_src_data;                                                   // rsp_mux:src_data -> dma_read_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                  // dma_read_master_agent:rp_ready -> rsp_mux:src_ready
	wire    [0:0] rsp_mux_src_channel;                                                // rsp_mux:src_channel -> dma_read_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                          // rsp_mux:src_startofpacket -> dma_read_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                            // rsp_mux:src_endofpacket -> dma_read_master_agent:rp_endofpacket
	wire   [15:0] avalon_slave_s0_agent_m0_readdata;                                  // Avalon_slave_s0_translator:uav_readdata -> Avalon_slave_s0_agent:m0_readdata
	wire          avalon_slave_s0_agent_m0_waitrequest;                               // Avalon_slave_s0_translator:uav_waitrequest -> Avalon_slave_s0_agent:m0_waitrequest
	wire          avalon_slave_s0_agent_m0_debugaccess;                               // Avalon_slave_s0_agent:m0_debugaccess -> Avalon_slave_s0_translator:uav_debugaccess
	wire    [9:0] avalon_slave_s0_agent_m0_address;                                   // Avalon_slave_s0_agent:m0_address -> Avalon_slave_s0_translator:uav_address
	wire    [1:0] avalon_slave_s0_agent_m0_byteenable;                                // Avalon_slave_s0_agent:m0_byteenable -> Avalon_slave_s0_translator:uav_byteenable
	wire          avalon_slave_s0_agent_m0_read;                                      // Avalon_slave_s0_agent:m0_read -> Avalon_slave_s0_translator:uav_read
	wire          avalon_slave_s0_agent_m0_readdatavalid;                             // Avalon_slave_s0_translator:uav_readdatavalid -> Avalon_slave_s0_agent:m0_readdatavalid
	wire          avalon_slave_s0_agent_m0_lock;                                      // Avalon_slave_s0_agent:m0_lock -> Avalon_slave_s0_translator:uav_lock
	wire   [15:0] avalon_slave_s0_agent_m0_writedata;                                 // Avalon_slave_s0_agent:m0_writedata -> Avalon_slave_s0_translator:uav_writedata
	wire          avalon_slave_s0_agent_m0_write;                                     // Avalon_slave_s0_agent:m0_write -> Avalon_slave_s0_translator:uav_write
	wire    [1:0] avalon_slave_s0_agent_m0_burstcount;                                // Avalon_slave_s0_agent:m0_burstcount -> Avalon_slave_s0_translator:uav_burstcount
	wire          avalon_slave_s0_agent_rf_source_valid;                              // Avalon_slave_s0_agent:rf_source_valid -> Avalon_slave_s0_agent_rsp_fifo:in_valid
	wire   [64:0] avalon_slave_s0_agent_rf_source_data;                               // Avalon_slave_s0_agent:rf_source_data -> Avalon_slave_s0_agent_rsp_fifo:in_data
	wire          avalon_slave_s0_agent_rf_source_ready;                              // Avalon_slave_s0_agent_rsp_fifo:in_ready -> Avalon_slave_s0_agent:rf_source_ready
	wire          avalon_slave_s0_agent_rf_source_startofpacket;                      // Avalon_slave_s0_agent:rf_source_startofpacket -> Avalon_slave_s0_agent_rsp_fifo:in_startofpacket
	wire          avalon_slave_s0_agent_rf_source_endofpacket;                        // Avalon_slave_s0_agent:rf_source_endofpacket -> Avalon_slave_s0_agent_rsp_fifo:in_endofpacket
	wire          avalon_slave_s0_agent_rsp_fifo_out_valid;                           // Avalon_slave_s0_agent_rsp_fifo:out_valid -> Avalon_slave_s0_agent:rf_sink_valid
	wire   [64:0] avalon_slave_s0_agent_rsp_fifo_out_data;                            // Avalon_slave_s0_agent_rsp_fifo:out_data -> Avalon_slave_s0_agent:rf_sink_data
	wire          avalon_slave_s0_agent_rsp_fifo_out_ready;                           // Avalon_slave_s0_agent:rf_sink_ready -> Avalon_slave_s0_agent_rsp_fifo:out_ready
	wire          avalon_slave_s0_agent_rsp_fifo_out_startofpacket;                   // Avalon_slave_s0_agent_rsp_fifo:out_startofpacket -> Avalon_slave_s0_agent:rf_sink_startofpacket
	wire          avalon_slave_s0_agent_rsp_fifo_out_endofpacket;                     // Avalon_slave_s0_agent_rsp_fifo:out_endofpacket -> Avalon_slave_s0_agent:rf_sink_endofpacket
	wire          avalon_slave_s0_agent_rdata_fifo_src_valid;                         // Avalon_slave_s0_agent:rdata_fifo_src_valid -> Avalon_slave_s0_agent_rdata_fifo:in_valid
	wire   [17:0] avalon_slave_s0_agent_rdata_fifo_src_data;                          // Avalon_slave_s0_agent:rdata_fifo_src_data -> Avalon_slave_s0_agent_rdata_fifo:in_data
	wire          avalon_slave_s0_agent_rdata_fifo_src_ready;                         // Avalon_slave_s0_agent_rdata_fifo:in_ready -> Avalon_slave_s0_agent:rdata_fifo_src_ready
	wire          avalon_slave_s0_agent_rdata_fifo_out_valid;                         // Avalon_slave_s0_agent_rdata_fifo:out_valid -> Avalon_slave_s0_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_slave_s0_agent_rdata_fifo_out_data;                          // Avalon_slave_s0_agent_rdata_fifo:out_data -> Avalon_slave_s0_agent:rdata_fifo_sink_data
	wire          avalon_slave_s0_agent_rdata_fifo_out_ready;                         // Avalon_slave_s0_agent:rdata_fifo_sink_ready -> Avalon_slave_s0_agent_rdata_fifo:out_ready
	wire          dma_read_master_agent_cp_valid;                                     // dma_read_master_agent:cp_valid -> router:sink_valid
	wire  [189:0] dma_read_master_agent_cp_data;                                      // dma_read_master_agent:cp_data -> router:sink_data
	wire          dma_read_master_agent_cp_ready;                                     // router:sink_ready -> dma_read_master_agent:cp_ready
	wire          dma_read_master_agent_cp_startofpacket;                             // dma_read_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          dma_read_master_agent_cp_endofpacket;                               // dma_read_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                   // router:src_valid -> cmd_demux:sink_valid
	wire  [189:0] router_src_data;                                                    // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                   // cmd_demux:sink_ready -> router:src_ready
	wire    [0:0] router_src_channel;                                                 // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                           // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                             // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          avalon_slave_s0_agent_rp_valid;                                     // Avalon_slave_s0_agent:rp_valid -> router_001:sink_valid
	wire   [63:0] avalon_slave_s0_agent_rp_data;                                      // Avalon_slave_s0_agent:rp_data -> router_001:sink_data
	wire          avalon_slave_s0_agent_rp_ready;                                     // router_001:sink_ready -> Avalon_slave_s0_agent:rp_ready
	wire          avalon_slave_s0_agent_rp_startofpacket;                             // Avalon_slave_s0_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          avalon_slave_s0_agent_rp_endofpacket;                               // Avalon_slave_s0_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          avalon_slave_s0_burst_adapter_source0_valid;                        // Avalon_slave_s0_burst_adapter:source0_valid -> Avalon_slave_s0_agent:cp_valid
	wire   [63:0] avalon_slave_s0_burst_adapter_source0_data;                         // Avalon_slave_s0_burst_adapter:source0_data -> Avalon_slave_s0_agent:cp_data
	wire          avalon_slave_s0_burst_adapter_source0_ready;                        // Avalon_slave_s0_agent:cp_ready -> Avalon_slave_s0_burst_adapter:source0_ready
	wire    [0:0] avalon_slave_s0_burst_adapter_source0_channel;                      // Avalon_slave_s0_burst_adapter:source0_channel -> Avalon_slave_s0_agent:cp_channel
	wire          avalon_slave_s0_burst_adapter_source0_startofpacket;                // Avalon_slave_s0_burst_adapter:source0_startofpacket -> Avalon_slave_s0_agent:cp_startofpacket
	wire          avalon_slave_s0_burst_adapter_source0_endofpacket;                  // Avalon_slave_s0_burst_adapter:source0_endofpacket -> Avalon_slave_s0_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [189:0] cmd_demux_src0_data;                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [0:0] cmd_demux_src0_channel;                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [189:0] rsp_demux_src0_data;                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [0:0] rsp_demux_src0_channel;                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          router_001_src_valid;                                               // router_001:src_valid -> Avalon_slave_s0_rsp_width_adapter:in_valid
	wire   [63:0] router_001_src_data;                                                // router_001:src_data -> Avalon_slave_s0_rsp_width_adapter:in_data
	wire          router_001_src_ready;                                               // Avalon_slave_s0_rsp_width_adapter:in_ready -> router_001:src_ready
	wire    [0:0] router_001_src_channel;                                             // router_001:src_channel -> Avalon_slave_s0_rsp_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                       // router_001:src_startofpacket -> Avalon_slave_s0_rsp_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                         // router_001:src_endofpacket -> Avalon_slave_s0_rsp_width_adapter:in_endofpacket
	wire          avalon_slave_s0_rsp_width_adapter_src_valid;                        // Avalon_slave_s0_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [189:0] avalon_slave_s0_rsp_width_adapter_src_data;                         // Avalon_slave_s0_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          avalon_slave_s0_rsp_width_adapter_src_ready;                        // rsp_demux:sink_ready -> Avalon_slave_s0_rsp_width_adapter:out_ready
	wire    [0:0] avalon_slave_s0_rsp_width_adapter_src_channel;                      // Avalon_slave_s0_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          avalon_slave_s0_rsp_width_adapter_src_startofpacket;                // Avalon_slave_s0_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          avalon_slave_s0_rsp_width_adapter_src_endofpacket;                  // Avalon_slave_s0_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                  // cmd_mux:src_valid -> Avalon_slave_s0_cmd_width_adapter:in_valid
	wire  [189:0] cmd_mux_src_data;                                                   // cmd_mux:src_data -> Avalon_slave_s0_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                  // Avalon_slave_s0_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [0:0] cmd_mux_src_channel;                                                // cmd_mux:src_channel -> Avalon_slave_s0_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                          // cmd_mux:src_startofpacket -> Avalon_slave_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                            // cmd_mux:src_endofpacket -> Avalon_slave_s0_cmd_width_adapter:in_endofpacket
	wire          avalon_slave_s0_cmd_width_adapter_src_valid;                        // Avalon_slave_s0_cmd_width_adapter:out_valid -> Avalon_slave_s0_burst_adapter:sink0_valid
	wire   [63:0] avalon_slave_s0_cmd_width_adapter_src_data;                         // Avalon_slave_s0_cmd_width_adapter:out_data -> Avalon_slave_s0_burst_adapter:sink0_data
	wire          avalon_slave_s0_cmd_width_adapter_src_ready;                        // Avalon_slave_s0_burst_adapter:sink0_ready -> Avalon_slave_s0_cmd_width_adapter:out_ready
	wire    [0:0] avalon_slave_s0_cmd_width_adapter_src_channel;                      // Avalon_slave_s0_cmd_width_adapter:out_channel -> Avalon_slave_s0_burst_adapter:sink0_channel
	wire          avalon_slave_s0_cmd_width_adapter_src_startofpacket;                // Avalon_slave_s0_cmd_width_adapter:out_startofpacket -> Avalon_slave_s0_burst_adapter:sink0_startofpacket
	wire          avalon_slave_s0_cmd_width_adapter_src_endofpacket;                  // Avalon_slave_s0_cmd_width_adapter:out_endofpacket -> Avalon_slave_s0_burst_adapter:sink0_endofpacket

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (10),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (10),
		.UAV_BURSTCOUNT_W            (5),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_read_master_translator (
		.clk                    (clk_50_clk_clk),                                                                                                                        //                       clk.clk
		.reset                  (dma_reset_reset_bridge_in_reset_reset),                                                                                                 //                     reset.reset
		.uav_address            (dma_read_master_translator_avalon_universal_master_0_address),                                                                          // avalon_universal_master_0.address
		.uav_burstcount         (dma_read_master_translator_avalon_universal_master_0_burstcount),                                                                       //                          .burstcount
		.uav_read               (dma_read_master_translator_avalon_universal_master_0_read),                                                                             //                          .read
		.uav_write              (dma_read_master_translator_avalon_universal_master_0_write),                                                                            //                          .write
		.uav_waitrequest        (dma_read_master_translator_avalon_universal_master_0_waitrequest),                                                                      //                          .waitrequest
		.uav_readdatavalid      (dma_read_master_translator_avalon_universal_master_0_readdatavalid),                                                                    //                          .readdatavalid
		.uav_byteenable         (dma_read_master_translator_avalon_universal_master_0_byteenable),                                                                       //                          .byteenable
		.uav_readdata           (dma_read_master_translator_avalon_universal_master_0_readdata),                                                                         //                          .readdata
		.uav_writedata          (dma_read_master_translator_avalon_universal_master_0_writedata),                                                                        //                          .writedata
		.uav_lock               (dma_read_master_translator_avalon_universal_master_0_lock),                                                                             //                          .lock
		.uav_debugaccess        (dma_read_master_translator_avalon_universal_master_0_debugaccess),                                                                      //                          .debugaccess
		.av_address             (dma_read_master_address),                                                                                                               //      avalon_anti_master_0.address
		.av_waitrequest         (dma_read_master_waitrequest),                                                                                                           //                          .waitrequest
		.av_chipselect          (dma_read_master_chipselect),                                                                                                            //                          .chipselect
		.av_read                (dma_read_master_read),                                                                                                                  //                          .read
		.av_readdata            (dma_read_master_readdata),                                                                                                              //                          .readdata
		.av_readdatavalid       (dma_read_master_readdatavalid),                                                                                                         //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                                                                                  //               (terminated)
		.av_byteenable          (16'b1111111111111111),                                                                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                                                                                  //               (terminated)
		.av_write               (1'b0),                                                                                                                                  //               (terminated)
		.av_writedata           (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), //               (terminated)
		.av_lock                (1'b0),                                                                                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                                                                                  //               (terminated)
		.uav_clken              (),                                                                                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                                                                                 //               (terminated)
		.av_response            (),                                                                                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                                                                                       //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (10),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (3),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) avalon_slave_s0_translator (
		.clk                    (clk_50_clk_clk),                         //                      clk.clk
		.reset                  (dma_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (avalon_slave_s0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (avalon_slave_s0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (avalon_slave_s0_agent_m0_read),          //                         .read
		.uav_write              (avalon_slave_s0_agent_m0_write),         //                         .write
		.uav_waitrequest        (avalon_slave_s0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (avalon_slave_s0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (avalon_slave_s0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (avalon_slave_s0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (avalon_slave_s0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (avalon_slave_s0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (avalon_slave_s0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Avalon_slave_s0_address),                //      avalon_anti_slave_0.address
		.av_write               (Avalon_slave_s0_write),                  //                         .write
		.av_read                (Avalon_slave_s0_read),                   //                         .read
		.av_readdata            (Avalon_slave_s0_readdata),               //                         .readdata
		.av_writedata           (Avalon_slave_s0_writedata),              //                         .writedata
		.av_byteenable          (Avalon_slave_s0_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                       //              (terminated)
		.av_beginbursttransfer  (),                                       //              (terminated)
		.av_burstcount          (),                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                   //              (terminated)
		.av_waitrequest         (1'b0),                                   //              (terminated)
		.av_writebyteenable     (),                                       //              (terminated)
		.av_lock                (),                                       //              (terminated)
		.av_chipselect          (),                                       //              (terminated)
		.av_clken               (),                                       //              (terminated)
		.uav_clken              (1'b0),                                   //              (terminated)
		.av_debugaccess         (),                                       //              (terminated)
		.av_outputenable        (),                                       //              (terminated)
		.uav_response           (),                                       //              (terminated)
		.av_response            (2'b00),                                  //              (terminated)
		.uav_writeresponsevalid (),                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                    //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (189),
		.PKT_ORI_BURST_SIZE_L      (187),
		.PKT_RESPONSE_STATUS_H     (186),
		.PKT_RESPONSE_STATUS_L     (185),
		.PKT_QOS_H                 (174),
		.PKT_QOS_L                 (174),
		.PKT_DATA_SIDEBAND_H       (172),
		.PKT_DATA_SIDEBAND_L       (172),
		.PKT_ADDR_SIDEBAND_H       (171),
		.PKT_ADDR_SIDEBAND_L       (171),
		.PKT_BURST_TYPE_H          (170),
		.PKT_BURST_TYPE_L          (169),
		.PKT_CACHE_H               (184),
		.PKT_CACHE_L               (181),
		.PKT_THREAD_ID_H           (177),
		.PKT_THREAD_ID_L           (177),
		.PKT_BURST_SIZE_H          (168),
		.PKT_BURST_SIZE_L          (166),
		.PKT_TRANS_EXCLUSIVE       (159),
		.PKT_TRANS_LOCK            (158),
		.PKT_BEGIN_BURST           (173),
		.PKT_PROTECTION_H          (180),
		.PKT_PROTECTION_L          (178),
		.PKT_BURSTWRAP_H           (165),
		.PKT_BURSTWRAP_L           (165),
		.PKT_BYTE_CNT_H            (164),
		.PKT_BYTE_CNT_L            (160),
		.PKT_ADDR_H                (153),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (154),
		.PKT_TRANS_POSTED          (155),
		.PKT_TRANS_WRITE           (156),
		.PKT_TRANS_READ            (157),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (175),
		.PKT_SRC_ID_L              (175),
		.PKT_DEST_ID_H             (176),
		.PKT_DEST_ID_L             (176),
		.ST_DATA_W                 (190),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (5),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_read_master_agent (
		.clk                   (clk_50_clk_clk),                                                     //       clk.clk
		.reset                 (dma_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (dma_read_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_read_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_read_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_read_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_read_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_read_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_read_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_read_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_read_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_read_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_read_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_read_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_read_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_read_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_read_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_read_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                  //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                   //          .data
		.rp_channel            (rsp_mux_src_channel),                                                //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                          //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                            //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                  //          .ready
		.av_response           (),                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (63),
		.PKT_ORI_BURST_SIZE_L      (61),
		.PKT_RESPONSE_STATUS_H     (60),
		.PKT_RESPONSE_STATUS_L     (59),
		.PKT_BURST_SIZE_H          (42),
		.PKT_BURST_SIZE_L          (40),
		.PKT_TRANS_LOCK            (32),
		.PKT_BEGIN_BURST           (47),
		.PKT_PROTECTION_H          (54),
		.PKT_PROTECTION_L          (52),
		.PKT_BURSTWRAP_H           (39),
		.PKT_BURSTWRAP_L           (39),
		.PKT_BYTE_CNT_H            (38),
		.PKT_BYTE_CNT_L            (34),
		.PKT_ADDR_H                (27),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (28),
		.PKT_TRANS_POSTED          (29),
		.PKT_TRANS_WRITE           (30),
		.PKT_TRANS_READ            (31),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (49),
		.PKT_SRC_ID_L              (49),
		.PKT_DEST_ID_H             (50),
		.PKT_DEST_ID_L             (50),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (64),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) avalon_slave_s0_agent (
		.clk                     (clk_50_clk_clk),                                      //             clk.clk
		.reset                   (dma_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (avalon_slave_s0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (avalon_slave_s0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (avalon_slave_s0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (avalon_slave_s0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (avalon_slave_s0_agent_m0_lock),                       //                .lock
		.m0_readdata             (avalon_slave_s0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (avalon_slave_s0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (avalon_slave_s0_agent_m0_read),                       //                .read
		.m0_waitrequest          (avalon_slave_s0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (avalon_slave_s0_agent_m0_writedata),                  //                .writedata
		.m0_write                (avalon_slave_s0_agent_m0_write),                      //                .write
		.rp_endofpacket          (avalon_slave_s0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (avalon_slave_s0_agent_rp_ready),                      //                .ready
		.rp_valid                (avalon_slave_s0_agent_rp_valid),                      //                .valid
		.rp_data                 (avalon_slave_s0_agent_rp_data),                       //                .data
		.rp_startofpacket        (avalon_slave_s0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (avalon_slave_s0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (avalon_slave_s0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (avalon_slave_s0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (avalon_slave_s0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (avalon_slave_s0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (avalon_slave_s0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (avalon_slave_s0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (avalon_slave_s0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (avalon_slave_s0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (avalon_slave_s0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (avalon_slave_s0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (avalon_slave_s0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (avalon_slave_s0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (avalon_slave_s0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (avalon_slave_s0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (avalon_slave_s0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_slave_s0_agent_rdata_fifo_out_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_slave_s0_agent_rdata_fifo_out_valid),          //                .valid
		.rdata_fifo_sink_data    (avalon_slave_s0_agent_rdata_fifo_out_data),           //                .data
		.rdata_fifo_src_ready    (avalon_slave_s0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (avalon_slave_s0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (avalon_slave_s0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (65),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) avalon_slave_s0_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                   //       clk.clk
		.reset             (dma_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (avalon_slave_s0_agent_rf_source_data),             //        in.data
		.in_valid          (avalon_slave_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (avalon_slave_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (avalon_slave_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (avalon_slave_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (avalon_slave_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (avalon_slave_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (avalon_slave_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (avalon_slave_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (avalon_slave_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) avalon_slave_s0_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                             //       clk.clk
		.reset             (dma_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (avalon_slave_s0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (avalon_slave_s0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (avalon_slave_s0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (avalon_slave_s0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (avalon_slave_s0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (avalon_slave_s0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	dma_mem_mm_interconnect_1_router router (
		.sink_ready         (dma_read_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (dma_read_master_agent_cp_valid),         //          .valid
		.sink_data          (dma_read_master_agent_cp_data),          //          .data
		.sink_startofpacket (dma_read_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_read_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                         //       clk.clk
		.reset              (dma_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                       //       src.ready
		.src_valid          (router_src_valid),                       //          .valid
		.src_data           (router_src_data),                        //          .data
		.src_channel        (router_src_channel),                     //          .channel
		.src_startofpacket  (router_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                  //          .endofpacket
	);

	dma_mem_mm_interconnect_1_router_001 router_001 (
		.sink_ready         (avalon_slave_s0_agent_rp_ready),         //      sink.ready
		.sink_valid         (avalon_slave_s0_agent_rp_valid),         //          .valid
		.sink_data          (avalon_slave_s0_agent_rp_data),          //          .data
		.sink_startofpacket (avalon_slave_s0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (avalon_slave_s0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                         //       clk.clk
		.reset              (dma_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_001_src_ready),                   //       src.ready
		.src_valid          (router_001_src_valid),                   //          .valid
		.src_data           (router_001_src_data),                    //          .data
		.src_channel        (router_001_src_channel),                 //          .channel
		.src_startofpacket  (router_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)              //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (27),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (47),
		.PKT_BYTE_CNT_H            (38),
		.PKT_BYTE_CNT_L            (34),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (42),
		.PKT_BURST_SIZE_L          (40),
		.PKT_BURST_TYPE_H          (44),
		.PKT_BURST_TYPE_L          (43),
		.PKT_BURSTWRAP_H           (39),
		.PKT_BURSTWRAP_L           (39),
		.PKT_TRANS_COMPRESSED_READ (28),
		.PKT_TRANS_WRITE           (30),
		.PKT_TRANS_READ            (31),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (64),
		.ST_CHANNEL_W              (1),
		.OUT_BYTE_CNT_H            (35),
		.OUT_BURSTWRAP_H           (39),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) avalon_slave_s0_burst_adapter (
		.clk                   (clk_50_clk_clk),                                      //       cr0.clk
		.reset                 (dma_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.sink0_valid           (avalon_slave_s0_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (avalon_slave_s0_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (avalon_slave_s0_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (avalon_slave_s0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (avalon_slave_s0_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (avalon_slave_s0_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (avalon_slave_s0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (avalon_slave_s0_burst_adapter_source0_data),          //          .data
		.source0_channel       (avalon_slave_s0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (avalon_slave_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (avalon_slave_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (avalon_slave_s0_burst_adapter_source0_ready)          //          .ready
	);

	dma_mem_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (clk_50_clk_clk),                        //       clk.clk
		.reset              (dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                      //      sink.ready
		.sink_channel       (router_src_channel),                    //          .channel
		.sink_data          (router_src_data),                       //          .data
		.sink_startofpacket (router_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_src_valid),                      //          .valid
		.src0_ready         (cmd_demux_src0_ready),                  //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                  //          .valid
		.src0_data          (cmd_demux_src0_data),                   //          .data
		.src0_channel       (cmd_demux_src0_channel),                //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)             //          .endofpacket
	);

	dma_mem_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (clk_50_clk_clk),                        //       clk.clk
		.reset               (dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_src_valid),                     //          .valid
		.src_data            (cmd_mux_src_data),                      //          .data
		.src_channel         (cmd_mux_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                //          .channel
		.sink0_data          (cmd_demux_src0_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)             //          .endofpacket
	);

	dma_mem_mm_interconnect_1_cmd_demux rsp_demux (
		.clk                (clk_50_clk_clk),                                      //       clk.clk
		.reset              (dma_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.sink_ready         (avalon_slave_s0_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (avalon_slave_s0_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (avalon_slave_s0_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (avalon_slave_s0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (avalon_slave_s0_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (avalon_slave_s0_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                           //          .endofpacket
	);

	dma_mem_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (clk_50_clk_clk),                        //       clk.clk
		.reset               (dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                     //       src.ready
		.src_valid           (rsp_mux_src_valid),                     //          .valid
		.src_data            (rsp_mux_src_data),                      //          .data
		.src_channel         (rsp_mux_src_channel),                   //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                  //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                  //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                //          .channel
		.sink0_data          (rsp_demux_src0_data),                   //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)             //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (27),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (38),
		.IN_PKT_BYTE_CNT_L             (34),
		.IN_PKT_TRANS_COMPRESSED_READ  (28),
		.IN_PKT_BURSTWRAP_H            (39),
		.IN_PKT_BURSTWRAP_L            (39),
		.IN_PKT_BURST_SIZE_H           (42),
		.IN_PKT_BURST_SIZE_L           (40),
		.IN_PKT_RESPONSE_STATUS_H      (60),
		.IN_PKT_RESPONSE_STATUS_L      (59),
		.IN_PKT_TRANS_EXCLUSIVE        (33),
		.IN_PKT_BURST_TYPE_H           (44),
		.IN_PKT_BURST_TYPE_L           (43),
		.IN_PKT_ORI_BURST_SIZE_L       (61),
		.IN_PKT_ORI_BURST_SIZE_H       (63),
		.IN_ST_DATA_W                  (64),
		.OUT_PKT_ADDR_H                (153),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (164),
		.OUT_PKT_BYTE_CNT_L            (160),
		.OUT_PKT_TRANS_COMPRESSED_READ (154),
		.OUT_PKT_BURST_SIZE_H          (168),
		.OUT_PKT_BURST_SIZE_L          (166),
		.OUT_PKT_RESPONSE_STATUS_H     (186),
		.OUT_PKT_RESPONSE_STATUS_L     (185),
		.OUT_PKT_TRANS_EXCLUSIVE       (159),
		.OUT_PKT_BURST_TYPE_H          (170),
		.OUT_PKT_BURST_TYPE_L          (169),
		.OUT_PKT_ORI_BURST_SIZE_L      (187),
		.OUT_PKT_ORI_BURST_SIZE_H      (189),
		.OUT_ST_DATA_W                 (190),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) avalon_slave_s0_rsp_width_adapter (
		.clk                  (clk_50_clk_clk),                                      //       clk.clk
		.reset                (dma_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_valid             (router_001_src_valid),                                //      sink.valid
		.in_channel           (router_001_src_channel),                              //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                        //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                          //          .endofpacket
		.in_ready             (router_001_src_ready),                                //          .ready
		.in_data              (router_001_src_data),                                 //          .data
		.out_endofpacket      (avalon_slave_s0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (avalon_slave_s0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (avalon_slave_s0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (avalon_slave_s0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (avalon_slave_s0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (avalon_slave_s0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (153),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (164),
		.IN_PKT_BYTE_CNT_L             (160),
		.IN_PKT_TRANS_COMPRESSED_READ  (154),
		.IN_PKT_BURSTWRAP_H            (165),
		.IN_PKT_BURSTWRAP_L            (165),
		.IN_PKT_BURST_SIZE_H           (168),
		.IN_PKT_BURST_SIZE_L           (166),
		.IN_PKT_RESPONSE_STATUS_H      (186),
		.IN_PKT_RESPONSE_STATUS_L      (185),
		.IN_PKT_TRANS_EXCLUSIVE        (159),
		.IN_PKT_BURST_TYPE_H           (170),
		.IN_PKT_BURST_TYPE_L           (169),
		.IN_PKT_ORI_BURST_SIZE_L       (187),
		.IN_PKT_ORI_BURST_SIZE_H       (189),
		.IN_ST_DATA_W                  (190),
		.OUT_PKT_ADDR_H                (27),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (38),
		.OUT_PKT_BYTE_CNT_L            (34),
		.OUT_PKT_TRANS_COMPRESSED_READ (28),
		.OUT_PKT_BURST_SIZE_H          (42),
		.OUT_PKT_BURST_SIZE_L          (40),
		.OUT_PKT_RESPONSE_STATUS_H     (60),
		.OUT_PKT_RESPONSE_STATUS_L     (59),
		.OUT_PKT_TRANS_EXCLUSIVE       (33),
		.OUT_PKT_BURST_TYPE_H          (44),
		.OUT_PKT_BURST_TYPE_L          (43),
		.OUT_PKT_ORI_BURST_SIZE_L      (61),
		.OUT_PKT_ORI_BURST_SIZE_H      (63),
		.OUT_ST_DATA_W                 (64),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) avalon_slave_s0_cmd_width_adapter (
		.clk                  (clk_50_clk_clk),                                      //       clk.clk
		.reset                (dma_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                   //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                 //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                           //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                             //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                   //          .ready
		.in_data              (cmd_mux_src_data),                                    //          .data
		.out_endofpacket      (avalon_slave_s0_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (avalon_slave_s0_cmd_width_adapter_src_data),          //          .data
		.out_channel          (avalon_slave_s0_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (avalon_slave_s0_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (avalon_slave_s0_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (avalon_slave_s0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                               // (terminated)
	);

endmodule
