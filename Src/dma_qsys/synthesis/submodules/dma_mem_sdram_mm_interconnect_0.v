// dma_mem_sdram_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.1 186 at 2016.09.01.21:42:10

`timescale 1 ps / 1 ps
module dma_mem_sdram_mm_interconnect_0 (
		input  wire         pll0_afi_clk_clk,                                      //                                    pll0_afi_clk.clk
		input  wire         r0_avl_m_translator_reset_reset_bridge_in_reset_reset, // r0_avl_m_translator_reset_reset_bridge_in_reset.reset
		input  wire         r0_avl_reset_reset_bridge_in_reset_reset,              //              r0_avl_reset_reset_bridge_in_reset.reset
		input  wire [29:0]  r0_avl_m_address,                                      //                                        r0_avl_m.address
		output wire         r0_avl_m_waitrequest,                                  //                                                .waitrequest
		input  wire [4:0]   r0_avl_m_burstcount,                                   //                                                .burstcount
		input  wire         r0_avl_m_beginbursttransfer,                           //                                                .beginbursttransfer
		input  wire         r0_avl_m_read,                                         //                                                .read
		output wire [255:0] r0_avl_m_readdata,                                     //                                                .readdata
		output wire         r0_avl_m_readdatavalid,                                //                                                .readdatavalid
		input  wire         r0_avl_m_write,                                        //                                                .write
		input  wire [255:0] r0_avl_m_writedata,                                    //                                                .writedata
		output wire [24:0]  c0_avl_address,                                        //                                          c0_avl.address
		output wire         c0_avl_write,                                          //                                                .write
		output wire         c0_avl_read,                                           //                                                .read
		input  wire [255:0] c0_avl_readdata,                                       //                                                .readdata
		output wire [255:0] c0_avl_writedata,                                      //                                                .writedata
		output wire         c0_avl_beginbursttransfer,                             //                                                .beginbursttransfer
		output wire [4:0]   c0_avl_burstcount,                                     //                                                .burstcount
		input  wire         c0_avl_readdatavalid,                                  //                                                .readdatavalid
		input  wire         c0_avl_waitrequest                                     //                                                .waitrequest
	);

	wire          r0_avl_m_translator_avalon_universal_master_0_waitrequest;   // c0_avl_translator:uav_waitrequest -> r0_avl_m_translator:uav_waitrequest
	wire  [255:0] r0_avl_m_translator_avalon_universal_master_0_readdata;      // c0_avl_translator:uav_readdata -> r0_avl_m_translator:uav_readdata
	wire          r0_avl_m_translator_avalon_universal_master_0_debugaccess;   // r0_avl_m_translator:uav_debugaccess -> c0_avl_translator:uav_debugaccess
	wire   [29:0] r0_avl_m_translator_avalon_universal_master_0_address;       // r0_avl_m_translator:uav_address -> c0_avl_translator:uav_address
	wire          r0_avl_m_translator_avalon_universal_master_0_read;          // r0_avl_m_translator:uav_read -> c0_avl_translator:uav_read
	wire   [31:0] r0_avl_m_translator_avalon_universal_master_0_byteenable;    // r0_avl_m_translator:uav_byteenable -> c0_avl_translator:uav_byteenable
	wire          r0_avl_m_translator_avalon_universal_master_0_readdatavalid; // c0_avl_translator:uav_readdatavalid -> r0_avl_m_translator:uav_readdatavalid
	wire          r0_avl_m_translator_avalon_universal_master_0_lock;          // r0_avl_m_translator:uav_lock -> c0_avl_translator:uav_lock
	wire          r0_avl_m_translator_avalon_universal_master_0_write;         // r0_avl_m_translator:uav_write -> c0_avl_translator:uav_write
	wire  [255:0] r0_avl_m_translator_avalon_universal_master_0_writedata;     // r0_avl_m_translator:uav_writedata -> c0_avl_translator:uav_writedata
	wire    [9:0] r0_avl_m_translator_avalon_universal_master_0_burstcount;    // r0_avl_m_translator:uav_burstcount -> c0_avl_translator:uav_burstcount

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (30),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (5),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (30),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (1),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) r0_avl_m_translator (
		.clk                    (pll0_afi_clk_clk),                                            //                       clk.clk
		.reset                  (r0_avl_m_translator_reset_reset_bridge_in_reset_reset),       //                     reset.reset
		.uav_address            (r0_avl_m_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (r0_avl_m_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (r0_avl_m_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (r0_avl_m_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (r0_avl_m_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (r0_avl_m_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (r0_avl_m_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (r0_avl_m_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (r0_avl_m_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (r0_avl_m_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (r0_avl_m_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (r0_avl_m_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (r0_avl_m_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (r0_avl_m_burstcount),                                         //                          .burstcount
		.av_beginbursttransfer  (r0_avl_m_beginbursttransfer),                                 //                          .beginbursttransfer
		.av_read                (r0_avl_m_read),                                               //                          .read
		.av_readdata            (r0_avl_m_readdata),                                           //                          .readdata
		.av_readdatavalid       (r0_avl_m_readdatavalid),                                      //                          .readdatavalid
		.av_write               (r0_avl_m_write),                                              //                          .write
		.av_writedata           (r0_avl_m_writedata),                                          //                          .writedata
		.av_byteenable          (32'b11111111111111111111111111111111),                        //               (terminated)
		.av_begintransfer       (1'b0),                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                        //               (terminated)
		.av_lock                (1'b0),                                                        //               (terminated)
		.av_debugaccess         (1'b0),                                                        //               (terminated)
		.uav_clken              (),                                                            //               (terminated)
		.av_clken               (1'b1),                                                        //               (terminated)
		.uav_response           (2'b00),                                                       //               (terminated)
		.av_response            (),                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                             //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (5),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (10),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) c0_avl_translator (
		.clk                    (pll0_afi_clk_clk),                                            //                      clk.clk
		.reset                  (r0_avl_m_translator_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (r0_avl_m_translator_avalon_universal_master_0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (r0_avl_m_translator_avalon_universal_master_0_burstcount),    //                         .burstcount
		.uav_read               (r0_avl_m_translator_avalon_universal_master_0_read),          //                         .read
		.uav_write              (r0_avl_m_translator_avalon_universal_master_0_write),         //                         .write
		.uav_waitrequest        (r0_avl_m_translator_avalon_universal_master_0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (r0_avl_m_translator_avalon_universal_master_0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (r0_avl_m_translator_avalon_universal_master_0_byteenable),    //                         .byteenable
		.uav_readdata           (r0_avl_m_translator_avalon_universal_master_0_readdata),      //                         .readdata
		.uav_writedata          (r0_avl_m_translator_avalon_universal_master_0_writedata),     //                         .writedata
		.uav_lock               (r0_avl_m_translator_avalon_universal_master_0_lock),          //                         .lock
		.uav_debugaccess        (r0_avl_m_translator_avalon_universal_master_0_debugaccess),   //                         .debugaccess
		.av_address             (c0_avl_address),                                              //      avalon_anti_slave_0.address
		.av_write               (c0_avl_write),                                                //                         .write
		.av_read                (c0_avl_read),                                                 //                         .read
		.av_readdata            (c0_avl_readdata),                                             //                         .readdata
		.av_writedata           (c0_avl_writedata),                                            //                         .writedata
		.av_beginbursttransfer  (c0_avl_beginbursttransfer),                                   //                         .beginbursttransfer
		.av_burstcount          (c0_avl_burstcount),                                           //                         .burstcount
		.av_readdatavalid       (c0_avl_readdatavalid),                                        //                         .readdatavalid
		.av_waitrequest         (c0_avl_waitrequest),                                          //                         .waitrequest
		.av_begintransfer       (),                                                            //              (terminated)
		.av_byteenable          (),                                                            //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_chipselect          (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

endmodule
