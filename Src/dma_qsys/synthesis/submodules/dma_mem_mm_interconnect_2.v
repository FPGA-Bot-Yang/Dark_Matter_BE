// dma_mem_mm_interconnect_2.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.1 186 at 2016.08.30.12:43:21

`timescale 1 ps / 1 ps
module dma_mem_mm_interconnect_2 (
		input  wire         clk_50_clk_clk,                               //                             clk_50_clk.clk
		input  wire         sdram_afi_clk_clk,                            //                          sdram_afi_clk.clk
		input  wire         dma_0_reset_reset_bridge_in_reset_reset,      //      dma_0_reset_reset_bridge_in_reset.reset
		input  wire         sdram_soft_reset_reset_bridge_in_reset_reset, // sdram_soft_reset_reset_bridge_in_reset.reset
		input  wire [29:0]  dma_0_write_master_address,                   //                     dma_0_write_master.address
		output wire         dma_0_write_master_waitrequest,               //                                       .waitrequest
		input  wire [15:0]  dma_0_write_master_byteenable,                //                                       .byteenable
		input  wire         dma_0_write_master_chipselect,                //                                       .chipselect
		input  wire         dma_0_write_master_write,                     //                                       .write
		input  wire [127:0] dma_0_write_master_writedata,                 //                                       .writedata
		output wire [24:0]  sdram_avl_address,                            //                              sdram_avl.address
		output wire         sdram_avl_write,                              //                                       .write
		output wire         sdram_avl_read,                               //                                       .read
		input  wire [255:0] sdram_avl_readdata,                           //                                       .readdata
		output wire [255:0] sdram_avl_writedata,                          //                                       .writedata
		output wire         sdram_avl_beginbursttransfer,                 //                                       .beginbursttransfer
		output wire [4:0]   sdram_avl_burstcount,                         //                                       .burstcount
		output wire [31:0]  sdram_avl_byteenable,                         //                                       .byteenable
		input  wire         sdram_avl_readdatavalid,                      //                                       .readdatavalid
		input  wire         sdram_avl_waitrequest                         //                                       .waitrequest
	);

	wire          dma_0_write_master_translator_avalon_universal_master_0_waitrequest;   // dma_0_write_master_agent:av_waitrequest -> dma_0_write_master_translator:uav_waitrequest
	wire  [127:0] dma_0_write_master_translator_avalon_universal_master_0_readdata;      // dma_0_write_master_agent:av_readdata -> dma_0_write_master_translator:uav_readdata
	wire          dma_0_write_master_translator_avalon_universal_master_0_debugaccess;   // dma_0_write_master_translator:uav_debugaccess -> dma_0_write_master_agent:av_debugaccess
	wire   [29:0] dma_0_write_master_translator_avalon_universal_master_0_address;       // dma_0_write_master_translator:uav_address -> dma_0_write_master_agent:av_address
	wire          dma_0_write_master_translator_avalon_universal_master_0_read;          // dma_0_write_master_translator:uav_read -> dma_0_write_master_agent:av_read
	wire   [15:0] dma_0_write_master_translator_avalon_universal_master_0_byteenable;    // dma_0_write_master_translator:uav_byteenable -> dma_0_write_master_agent:av_byteenable
	wire          dma_0_write_master_translator_avalon_universal_master_0_readdatavalid; // dma_0_write_master_agent:av_readdatavalid -> dma_0_write_master_translator:uav_readdatavalid
	wire          dma_0_write_master_translator_avalon_universal_master_0_lock;          // dma_0_write_master_translator:uav_lock -> dma_0_write_master_agent:av_lock
	wire          dma_0_write_master_translator_avalon_universal_master_0_write;         // dma_0_write_master_translator:uav_write -> dma_0_write_master_agent:av_write
	wire  [127:0] dma_0_write_master_translator_avalon_universal_master_0_writedata;     // dma_0_write_master_translator:uav_writedata -> dma_0_write_master_agent:av_writedata
	wire    [4:0] dma_0_write_master_translator_avalon_universal_master_0_burstcount;    // dma_0_write_master_translator:uav_burstcount -> dma_0_write_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                     // rsp_mux:src_valid -> dma_0_write_master_agent:rp_valid
	wire  [214:0] rsp_mux_src_data;                                                      // rsp_mux:src_data -> dma_0_write_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                     // dma_0_write_master_agent:rp_ready -> rsp_mux:src_ready
	wire    [0:0] rsp_mux_src_channel;                                                   // rsp_mux:src_channel -> dma_0_write_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                             // rsp_mux:src_startofpacket -> dma_0_write_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                               // rsp_mux:src_endofpacket -> dma_0_write_master_agent:rp_endofpacket
	wire  [255:0] sdram_avl_agent_m0_readdata;                                           // sdram_avl_translator:uav_readdata -> sdram_avl_agent:m0_readdata
	wire          sdram_avl_agent_m0_waitrequest;                                        // sdram_avl_translator:uav_waitrequest -> sdram_avl_agent:m0_waitrequest
	wire          sdram_avl_agent_m0_debugaccess;                                        // sdram_avl_agent:m0_debugaccess -> sdram_avl_translator:uav_debugaccess
	wire   [29:0] sdram_avl_agent_m0_address;                                            // sdram_avl_agent:m0_address -> sdram_avl_translator:uav_address
	wire   [31:0] sdram_avl_agent_m0_byteenable;                                         // sdram_avl_agent:m0_byteenable -> sdram_avl_translator:uav_byteenable
	wire          sdram_avl_agent_m0_read;                                               // sdram_avl_agent:m0_read -> sdram_avl_translator:uav_read
	wire          sdram_avl_agent_m0_readdatavalid;                                      // sdram_avl_translator:uav_readdatavalid -> sdram_avl_agent:m0_readdatavalid
	wire          sdram_avl_agent_m0_lock;                                               // sdram_avl_agent:m0_lock -> sdram_avl_translator:uav_lock
	wire  [255:0] sdram_avl_agent_m0_writedata;                                          // sdram_avl_agent:m0_writedata -> sdram_avl_translator:uav_writedata
	wire          sdram_avl_agent_m0_write;                                              // sdram_avl_agent:m0_write -> sdram_avl_translator:uav_write
	wire    [9:0] sdram_avl_agent_m0_burstcount;                                         // sdram_avl_agent:m0_burstcount -> sdram_avl_translator:uav_burstcount
	wire          sdram_avl_agent_rf_source_valid;                                       // sdram_avl_agent:rf_source_valid -> sdram_avl_agent_rsp_fifo:in_valid
	wire  [359:0] sdram_avl_agent_rf_source_data;                                        // sdram_avl_agent:rf_source_data -> sdram_avl_agent_rsp_fifo:in_data
	wire          sdram_avl_agent_rf_source_ready;                                       // sdram_avl_agent_rsp_fifo:in_ready -> sdram_avl_agent:rf_source_ready
	wire          sdram_avl_agent_rf_source_startofpacket;                               // sdram_avl_agent:rf_source_startofpacket -> sdram_avl_agent_rsp_fifo:in_startofpacket
	wire          sdram_avl_agent_rf_source_endofpacket;                                 // sdram_avl_agent:rf_source_endofpacket -> sdram_avl_agent_rsp_fifo:in_endofpacket
	wire          sdram_avl_agent_rsp_fifo_out_valid;                                    // sdram_avl_agent_rsp_fifo:out_valid -> sdram_avl_agent:rf_sink_valid
	wire  [359:0] sdram_avl_agent_rsp_fifo_out_data;                                     // sdram_avl_agent_rsp_fifo:out_data -> sdram_avl_agent:rf_sink_data
	wire          sdram_avl_agent_rsp_fifo_out_ready;                                    // sdram_avl_agent:rf_sink_ready -> sdram_avl_agent_rsp_fifo:out_ready
	wire          sdram_avl_agent_rsp_fifo_out_startofpacket;                            // sdram_avl_agent_rsp_fifo:out_startofpacket -> sdram_avl_agent:rf_sink_startofpacket
	wire          sdram_avl_agent_rsp_fifo_out_endofpacket;                              // sdram_avl_agent_rsp_fifo:out_endofpacket -> sdram_avl_agent:rf_sink_endofpacket
	wire          sdram_avl_agent_rdata_fifo_src_valid;                                  // sdram_avl_agent:rdata_fifo_src_valid -> sdram_avl_agent_rdata_fifo:in_valid
	wire  [257:0] sdram_avl_agent_rdata_fifo_src_data;                                   // sdram_avl_agent:rdata_fifo_src_data -> sdram_avl_agent_rdata_fifo:in_data
	wire          sdram_avl_agent_rdata_fifo_src_ready;                                  // sdram_avl_agent_rdata_fifo:in_ready -> sdram_avl_agent:rdata_fifo_src_ready
	wire          sdram_avl_agent_rdata_fifo_out_valid;                                  // sdram_avl_agent_rdata_fifo:out_valid -> sdram_avl_agent:rdata_fifo_sink_valid
	wire  [257:0] sdram_avl_agent_rdata_fifo_out_data;                                   // sdram_avl_agent_rdata_fifo:out_data -> sdram_avl_agent:rdata_fifo_sink_data
	wire          sdram_avl_agent_rdata_fifo_out_ready;                                  // sdram_avl_agent:rdata_fifo_sink_ready -> sdram_avl_agent_rdata_fifo:out_ready
	wire          dma_0_write_master_agent_cp_valid;                                     // dma_0_write_master_agent:cp_valid -> router:sink_valid
	wire  [214:0] dma_0_write_master_agent_cp_data;                                      // dma_0_write_master_agent:cp_data -> router:sink_data
	wire          dma_0_write_master_agent_cp_ready;                                     // router:sink_ready -> dma_0_write_master_agent:cp_ready
	wire          dma_0_write_master_agent_cp_startofpacket;                             // dma_0_write_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          dma_0_write_master_agent_cp_endofpacket;                               // dma_0_write_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                      // router:src_valid -> cmd_demux:sink_valid
	wire  [214:0] router_src_data;                                                       // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                      // cmd_demux:sink_ready -> router:src_ready
	wire    [0:0] router_src_channel;                                                    // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                              // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          sdram_avl_agent_rp_valid;                                              // sdram_avl_agent:rp_valid -> router_001:sink_valid
	wire  [358:0] sdram_avl_agent_rp_data;                                               // sdram_avl_agent:rp_data -> router_001:sink_data
	wire          sdram_avl_agent_rp_ready;                                              // router_001:sink_ready -> sdram_avl_agent:rp_ready
	wire          sdram_avl_agent_rp_startofpacket;                                      // sdram_avl_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          sdram_avl_agent_rp_endofpacket;                                        // sdram_avl_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          cmd_mux_src_valid;                                                     // cmd_mux:src_valid -> sdram_avl_cmd_width_adapter:in_valid
	wire  [214:0] cmd_mux_src_data;                                                      // cmd_mux:src_data -> sdram_avl_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                     // sdram_avl_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [0:0] cmd_mux_src_channel;                                                   // cmd_mux:src_channel -> sdram_avl_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                             // cmd_mux:src_startofpacket -> sdram_avl_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                               // cmd_mux:src_endofpacket -> sdram_avl_cmd_width_adapter:in_endofpacket
	wire          sdram_avl_cmd_width_adapter_src_valid;                                 // sdram_avl_cmd_width_adapter:out_valid -> sdram_avl_agent:cp_valid
	wire  [358:0] sdram_avl_cmd_width_adapter_src_data;                                  // sdram_avl_cmd_width_adapter:out_data -> sdram_avl_agent:cp_data
	wire          sdram_avl_cmd_width_adapter_src_ready;                                 // sdram_avl_agent:cp_ready -> sdram_avl_cmd_width_adapter:out_ready
	wire    [0:0] sdram_avl_cmd_width_adapter_src_channel;                               // sdram_avl_cmd_width_adapter:out_channel -> sdram_avl_agent:cp_channel
	wire          sdram_avl_cmd_width_adapter_src_startofpacket;                         // sdram_avl_cmd_width_adapter:out_startofpacket -> sdram_avl_agent:cp_startofpacket
	wire          sdram_avl_cmd_width_adapter_src_endofpacket;                           // sdram_avl_cmd_width_adapter:out_endofpacket -> sdram_avl_agent:cp_endofpacket
	wire          router_001_src_valid;                                                  // router_001:src_valid -> sdram_avl_rsp_width_adapter:in_valid
	wire  [358:0] router_001_src_data;                                                   // router_001:src_data -> sdram_avl_rsp_width_adapter:in_data
	wire          router_001_src_ready;                                                  // sdram_avl_rsp_width_adapter:in_ready -> router_001:src_ready
	wire    [0:0] router_001_src_channel;                                                // router_001:src_channel -> sdram_avl_rsp_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                          // router_001:src_startofpacket -> sdram_avl_rsp_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                            // router_001:src_endofpacket -> sdram_avl_rsp_width_adapter:in_endofpacket
	wire          sdram_avl_rsp_width_adapter_src_valid;                                 // sdram_avl_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [214:0] sdram_avl_rsp_width_adapter_src_data;                                  // sdram_avl_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          sdram_avl_rsp_width_adapter_src_ready;                                 // rsp_demux:sink_ready -> sdram_avl_rsp_width_adapter:out_ready
	wire    [0:0] sdram_avl_rsp_width_adapter_src_channel;                               // sdram_avl_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          sdram_avl_rsp_width_adapter_src_startofpacket;                         // sdram_avl_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          sdram_avl_rsp_width_adapter_src_endofpacket;                           // sdram_avl_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                  // cmd_demux:src0_valid -> crosser:in_valid
	wire  [214:0] cmd_demux_src0_data;                                                   // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                  // crosser:in_ready -> cmd_demux:src0_ready
	wire    [0:0] cmd_demux_src0_channel;                                                // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                          // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                            // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                     // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [214:0] crosser_out_data;                                                      // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                     // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [0:0] crosser_out_channel;                                                   // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                             // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                               // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                  // rsp_demux:src0_valid -> crosser_001:in_valid
	wire  [214:0] rsp_demux_src0_data;                                                   // rsp_demux:src0_data -> crosser_001:in_data
	wire          rsp_demux_src0_ready;                                                  // crosser_001:in_ready -> rsp_demux:src0_ready
	wire    [0:0] rsp_demux_src0_channel;                                                // rsp_demux:src0_channel -> crosser_001:in_channel
	wire          rsp_demux_src0_startofpacket;                                          // rsp_demux:src0_startofpacket -> crosser_001:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                            // rsp_demux:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                 // crosser_001:out_valid -> rsp_mux:sink0_valid
	wire  [214:0] crosser_001_out_data;                                                  // crosser_001:out_data -> rsp_mux:sink0_data
	wire          crosser_001_out_ready;                                                 // rsp_mux:sink0_ready -> crosser_001:out_ready
	wire    [0:0] crosser_001_out_channel;                                               // crosser_001:out_channel -> rsp_mux:sink0_channel
	wire          crosser_001_out_startofpacket;                                         // crosser_001:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                           // crosser_001:out_endofpacket -> rsp_mux:sink0_endofpacket

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (30),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (30),
		.UAV_BURSTCOUNT_W            (5),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_0_write_master_translator (
		.clk                    (clk_50_clk_clk),                                                        //                       clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset),                               //                     reset.reset
		.uav_address            (dma_0_write_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_0_write_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_0_write_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_0_write_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_0_write_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_0_write_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_0_write_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_0_write_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_0_write_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_0_write_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_0_write_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_0_write_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_0_write_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (dma_0_write_master_byteenable),                                         //                          .byteenable
		.av_chipselect          (dma_0_write_master_chipselect),                                         //                          .chipselect
		.av_write               (dma_0_write_master_write),                                              //                          .write
		.av_writedata           (dma_0_write_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                  //               (terminated)
		.av_read                (1'b0),                                                                  //               (terminated)
		.av_readdata            (),                                                                      //               (terminated)
		.av_readdatavalid       (),                                                                      //               (terminated)
		.av_lock                (1'b0),                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                  //               (terminated)
		.uav_clken              (),                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                 //               (terminated)
		.av_response            (),                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                       //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (5),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (10),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_avl_translator (
		.clk                    (sdram_afi_clk_clk),                            //                      clk.clk
		.reset                  (sdram_soft_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_avl_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_avl_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (sdram_avl_agent_m0_read),                      //                         .read
		.uav_write              (sdram_avl_agent_m0_write),                     //                         .write
		.uav_waitrequest        (sdram_avl_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (sdram_avl_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (sdram_avl_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (sdram_avl_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (sdram_avl_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (sdram_avl_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (sdram_avl_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (sdram_avl_address),                            //      avalon_anti_slave_0.address
		.av_write               (sdram_avl_write),                              //                         .write
		.av_read                (sdram_avl_read),                               //                         .read
		.av_readdata            (sdram_avl_readdata),                           //                         .readdata
		.av_writedata           (sdram_avl_writedata),                          //                         .writedata
		.av_beginbursttransfer  (sdram_avl_beginbursttransfer),                 //                         .beginbursttransfer
		.av_burstcount          (sdram_avl_burstcount),                         //                         .burstcount
		.av_byteenable          (sdram_avl_byteenable),                         //                         .byteenable
		.av_readdatavalid       (sdram_avl_readdatavalid),                      //                         .readdatavalid
		.av_waitrequest         (sdram_avl_waitrequest),                        //                         .waitrequest
		.av_begintransfer       (),                                             //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (214),
		.PKT_ORI_BURST_SIZE_L      (212),
		.PKT_RESPONSE_STATUS_H     (211),
		.PKT_RESPONSE_STATUS_L     (210),
		.PKT_QOS_H                 (199),
		.PKT_QOS_L                 (199),
		.PKT_DATA_SIDEBAND_H       (197),
		.PKT_DATA_SIDEBAND_L       (197),
		.PKT_ADDR_SIDEBAND_H       (196),
		.PKT_ADDR_SIDEBAND_L       (196),
		.PKT_BURST_TYPE_H          (195),
		.PKT_BURST_TYPE_L          (194),
		.PKT_CACHE_H               (209),
		.PKT_CACHE_L               (206),
		.PKT_THREAD_ID_H           (202),
		.PKT_THREAD_ID_L           (202),
		.PKT_BURST_SIZE_H          (193),
		.PKT_BURST_SIZE_L          (191),
		.PKT_TRANS_EXCLUSIVE       (179),
		.PKT_TRANS_LOCK            (178),
		.PKT_BEGIN_BURST           (198),
		.PKT_PROTECTION_H          (205),
		.PKT_PROTECTION_L          (203),
		.PKT_BURSTWRAP_H           (190),
		.PKT_BURSTWRAP_L           (190),
		.PKT_BYTE_CNT_H            (189),
		.PKT_BYTE_CNT_L            (180),
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (200),
		.PKT_SRC_ID_L              (200),
		.PKT_DEST_ID_H             (201),
		.PKT_DEST_ID_L             (201),
		.ST_DATA_W                 (215),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (5),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_0_write_master_agent (
		.clk                   (clk_50_clk_clk),                                                        //       clk.clk
		.reset                 (dma_0_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.av_address            (dma_0_write_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_0_write_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_0_write_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_0_write_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_0_write_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_0_write_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_0_write_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_0_write_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_0_write_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_0_write_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_0_write_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_0_write_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_0_write_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_0_write_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_0_write_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_0_write_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                     //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                      //          .data
		.rp_channel            (rsp_mux_src_channel),                                                   //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                               //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                     //          .ready
		.av_response           (),                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (358),
		.PKT_ORI_BURST_SIZE_L      (356),
		.PKT_RESPONSE_STATUS_H     (355),
		.PKT_RESPONSE_STATUS_L     (354),
		.PKT_BURST_SIZE_H          (337),
		.PKT_BURST_SIZE_L          (335),
		.PKT_TRANS_LOCK            (322),
		.PKT_BEGIN_BURST           (342),
		.PKT_PROTECTION_H          (349),
		.PKT_PROTECTION_L          (347),
		.PKT_BURSTWRAP_H           (334),
		.PKT_BURSTWRAP_L           (334),
		.PKT_BYTE_CNT_H            (333),
		.PKT_BYTE_CNT_L            (324),
		.PKT_ADDR_H                (317),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (318),
		.PKT_TRANS_POSTED          (319),
		.PKT_TRANS_WRITE           (320),
		.PKT_TRANS_READ            (321),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (344),
		.PKT_SRC_ID_L              (344),
		.PKT_DEST_ID_H             (345),
		.PKT_DEST_ID_L             (345),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (359),
		.AVS_BURSTCOUNT_W          (10),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sdram_avl_agent (
		.clk                     (sdram_afi_clk_clk),                             //             clk.clk
		.reset                   (sdram_soft_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (sdram_avl_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sdram_avl_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sdram_avl_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sdram_avl_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sdram_avl_agent_m0_lock),                       //                .lock
		.m0_readdata             (sdram_avl_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sdram_avl_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sdram_avl_agent_m0_read),                       //                .read
		.m0_waitrequest          (sdram_avl_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sdram_avl_agent_m0_writedata),                  //                .writedata
		.m0_write                (sdram_avl_agent_m0_write),                      //                .write
		.rp_endofpacket          (sdram_avl_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sdram_avl_agent_rp_ready),                      //                .ready
		.rp_valid                (sdram_avl_agent_rp_valid),                      //                .valid
		.rp_data                 (sdram_avl_agent_rp_data),                       //                .data
		.rp_startofpacket        (sdram_avl_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sdram_avl_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (sdram_avl_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (sdram_avl_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (sdram_avl_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (sdram_avl_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (sdram_avl_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (sdram_avl_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sdram_avl_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sdram_avl_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sdram_avl_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sdram_avl_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sdram_avl_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sdram_avl_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sdram_avl_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sdram_avl_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sdram_avl_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (sdram_avl_agent_rdata_fifo_out_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sdram_avl_agent_rdata_fifo_out_valid),          //                .valid
		.rdata_fifo_sink_data    (sdram_avl_agent_rdata_fifo_out_data),           //                .data
		.rdata_fifo_src_ready    (sdram_avl_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_avl_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sdram_avl_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (360),
		.FIFO_DEPTH          (33),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_avl_agent_rsp_fifo (
		.clk               (sdram_afi_clk_clk),                            //       clk.clk
		.reset             (sdram_soft_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_avl_agent_rf_source_data),               //        in.data
		.in_valid          (sdram_avl_agent_rf_source_valid),              //          .valid
		.in_ready          (sdram_avl_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (sdram_avl_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (sdram_avl_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (sdram_avl_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (sdram_avl_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (sdram_avl_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (sdram_avl_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (sdram_avl_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (64),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_avl_agent_rdata_fifo (
		.clk               (sdram_afi_clk_clk),                            //       clk.clk
		.reset             (sdram_soft_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_avl_agent_rdata_fifo_src_data),          //        in.data
		.in_valid          (sdram_avl_agent_rdata_fifo_src_valid),         //          .valid
		.in_ready          (sdram_avl_agent_rdata_fifo_src_ready),         //          .ready
		.out_data          (sdram_avl_agent_rdata_fifo_out_data),          //       out.data
		.out_valid         (sdram_avl_agent_rdata_fifo_out_valid),         //          .valid
		.out_ready         (sdram_avl_agent_rdata_fifo_out_ready),         //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	dma_mem_mm_interconnect_2_router router (
		.sink_ready         (dma_0_write_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (dma_0_write_master_agent_cp_valid),         //          .valid
		.sink_data          (dma_0_write_master_agent_cp_data),          //          .data
		.sink_startofpacket (dma_0_write_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_0_write_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                            //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_src_ready),                          //       src.ready
		.src_valid          (router_src_valid),                          //          .valid
		.src_data           (router_src_data),                           //          .data
		.src_channel        (router_src_channel),                        //          .channel
		.src_startofpacket  (router_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                     //          .endofpacket
	);

	dma_mem_mm_interconnect_2_router_001 router_001 (
		.sink_ready         (sdram_avl_agent_rp_ready),                     //      sink.ready
		.sink_valid         (sdram_avl_agent_rp_valid),                     //          .valid
		.sink_data          (sdram_avl_agent_rp_data),                      //          .data
		.sink_startofpacket (sdram_avl_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (sdram_avl_agent_rp_endofpacket),               //          .endofpacket
		.clk                (sdram_afi_clk_clk),                            //       clk.clk
		.reset              (sdram_soft_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                         //       src.ready
		.src_valid          (router_001_src_valid),                         //          .valid
		.src_data           (router_001_src_data),                          //          .data
		.src_channel        (router_001_src_channel),                       //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                    //          .endofpacket
	);

	dma_mem_mm_interconnect_2_cmd_demux cmd_demux (
		.clk                (clk_50_clk_clk),                          //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                        //      sink.ready
		.sink_channel       (router_src_channel),                      //          .channel
		.sink_data          (router_src_data),                         //          .data
		.sink_startofpacket (router_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_src_valid),                        //          .valid
		.src0_ready         (cmd_demux_src0_ready),                    //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                    //          .valid
		.src0_data          (cmd_demux_src0_data),                     //          .data
		.src0_channel       (cmd_demux_src0_channel),                  //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)               //          .endofpacket
	);

	dma_mem_mm_interconnect_2_cmd_mux cmd_mux (
		.clk                 (sdram_afi_clk_clk),                            //       clk.clk
		.reset               (sdram_soft_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_src_valid),                            //          .valid
		.src_data            (cmd_mux_src_data),                             //          .data
		.src_channel         (cmd_mux_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (crosser_out_ready),                            //     sink0.ready
		.sink0_valid         (crosser_out_valid),                            //          .valid
		.sink0_channel       (crosser_out_channel),                          //          .channel
		.sink0_data          (crosser_out_data),                             //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                       //          .endofpacket
	);

	dma_mem_mm_interconnect_2_rsp_demux rsp_demux (
		.clk                (sdram_afi_clk_clk),                             //       clk.clk
		.reset              (sdram_soft_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.sink_ready         (sdram_avl_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sdram_avl_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sdram_avl_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sdram_avl_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_avl_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sdram_avl_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_src0_data),                           //          .data
		.src0_channel       (rsp_demux_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                     //          .endofpacket
	);

	dma_mem_mm_interconnect_2_rsp_mux rsp_mux (
		.clk                 (clk_50_clk_clk),                          //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                       //       src.ready
		.src_valid           (rsp_mux_src_valid),                       //          .valid
		.src_data            (rsp_mux_src_data),                        //          .data
		.src_channel         (rsp_mux_src_channel),                     //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                   //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                   //          .valid
		.sink0_channel       (crosser_001_out_channel),                 //          .channel
		.sink0_data          (crosser_001_out_data),                    //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)              //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (189),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_BURSTWRAP_H            (190),
		.IN_PKT_BURSTWRAP_L            (190),
		.IN_PKT_BURST_SIZE_H           (193),
		.IN_PKT_BURST_SIZE_L           (191),
		.IN_PKT_RESPONSE_STATUS_H      (211),
		.IN_PKT_RESPONSE_STATUS_L      (210),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (195),
		.IN_PKT_BURST_TYPE_L           (194),
		.IN_PKT_ORI_BURST_SIZE_L       (212),
		.IN_PKT_ORI_BURST_SIZE_H       (214),
		.IN_ST_DATA_W                  (215),
		.OUT_PKT_ADDR_H                (317),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (333),
		.OUT_PKT_BYTE_CNT_L            (324),
		.OUT_PKT_TRANS_COMPRESSED_READ (318),
		.OUT_PKT_BURST_SIZE_H          (337),
		.OUT_PKT_BURST_SIZE_L          (335),
		.OUT_PKT_RESPONSE_STATUS_H     (355),
		.OUT_PKT_RESPONSE_STATUS_L     (354),
		.OUT_PKT_TRANS_EXCLUSIVE       (323),
		.OUT_PKT_BURST_TYPE_H          (339),
		.OUT_PKT_BURST_TYPE_L          (338),
		.OUT_PKT_ORI_BURST_SIZE_L      (356),
		.OUT_PKT_ORI_BURST_SIZE_H      (358),
		.OUT_ST_DATA_W                 (359),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_avl_cmd_width_adapter (
		.clk                  (sdram_afi_clk_clk),                             //       clk.clk
		.reset                (sdram_soft_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                             //      sink.valid
		.in_channel           (cmd_mux_src_channel),                           //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                     //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                       //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                             //          .ready
		.in_data              (cmd_mux_src_data),                              //          .data
		.out_endofpacket      (sdram_avl_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_avl_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sdram_avl_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_avl_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_avl_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_avl_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (317),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (333),
		.IN_PKT_BYTE_CNT_L             (324),
		.IN_PKT_TRANS_COMPRESSED_READ  (318),
		.IN_PKT_BURSTWRAP_H            (334),
		.IN_PKT_BURSTWRAP_L            (334),
		.IN_PKT_BURST_SIZE_H           (337),
		.IN_PKT_BURST_SIZE_L           (335),
		.IN_PKT_RESPONSE_STATUS_H      (355),
		.IN_PKT_RESPONSE_STATUS_L      (354),
		.IN_PKT_TRANS_EXCLUSIVE        (323),
		.IN_PKT_BURST_TYPE_H           (339),
		.IN_PKT_BURST_TYPE_L           (338),
		.IN_PKT_ORI_BURST_SIZE_L       (356),
		.IN_PKT_ORI_BURST_SIZE_H       (358),
		.IN_ST_DATA_W                  (359),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (189),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (193),
		.OUT_PKT_BURST_SIZE_L          (191),
		.OUT_PKT_RESPONSE_STATUS_H     (211),
		.OUT_PKT_RESPONSE_STATUS_L     (210),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (195),
		.OUT_PKT_BURST_TYPE_L          (194),
		.OUT_PKT_ORI_BURST_SIZE_L      (212),
		.OUT_PKT_ORI_BURST_SIZE_H      (214),
		.OUT_ST_DATA_W                 (215),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_avl_rsp_width_adapter (
		.clk                  (sdram_afi_clk_clk),                             //       clk.clk
		.reset                (sdram_soft_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (router_001_src_valid),                          //      sink.valid
		.in_channel           (router_001_src_channel),                        //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                    //          .endofpacket
		.in_ready             (router_001_src_ready),                          //          .ready
		.in_data              (router_001_src_data),                           //          .data
		.out_endofpacket      (sdram_avl_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_avl_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_avl_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_avl_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_avl_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_avl_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (215),
		.BITS_PER_SYMBOL     (215),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (1),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_50_clk_clk),                               //        in_clk.clk
		.in_reset          (dma_0_reset_reset_bridge_in_reset_reset),      //  in_clk_reset.reset
		.out_clk           (sdram_afi_clk_clk),                            //       out_clk.clk
		.out_reset         (sdram_soft_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                         //            in.ready
		.in_valid          (cmd_demux_src0_valid),                         //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                   //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                       //              .channel
		.in_data           (cmd_demux_src0_data),                          //              .data
		.out_ready         (crosser_out_ready),                            //           out.ready
		.out_valid         (crosser_out_valid),                            //              .valid
		.out_startofpacket (crosser_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_out_channel),                          //              .channel
		.out_data          (crosser_out_data),                             //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (215),
		.BITS_PER_SYMBOL     (215),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (1),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (sdram_afi_clk_clk),                            //        in_clk.clk
		.in_reset          (sdram_soft_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                               //       out_clk.clk
		.out_reset         (dma_0_reset_reset_bridge_in_reset_reset),      // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                       //              .channel
		.in_data           (rsp_demux_src0_data),                          //              .data
		.out_ready         (crosser_001_out_ready),                        //           out.ready
		.out_valid         (crosser_001_out_valid),                        //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_001_out_channel),                      //              .channel
		.out_data          (crosser_001_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

endmodule
